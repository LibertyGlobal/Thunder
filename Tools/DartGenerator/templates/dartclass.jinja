// If not stated otherwise in this file or this component's LICENSE file the
// following copyright and licenses apply:
//
// Copyright 2022 Liberty Global Service B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import 'package:json_rpc_2/json_rpc_2.dart' as jsonrpc2;
import 'dart:async';
import 'cpe_client_factory.dart';

{% if api.events | length > 0 %}
import 'package:freezed_annotation/freezed_annotation.dart';
part '{{api.filename}}.g.dart';
part '{{api.filename}}.freezed.dart';
{% endif %}

{% for s in api.structs -%}
  {% if s.doc -%}
  /// {{s.doc}}
  {% endif -%}
  {% if s.json_serializable -%}
  @JsonSerializable()
  {% endif -%}
  class {{s.structConvertedName()}} { //{{s.struct_name}} {{s.usage}}
    //xxrp:{{s.required_properties}}
{% for p in s.properties -%}
    ///{{p.doc}}
    final {{p.type}}{{"" if s.required_properties and p.name in s.required_properties else "?"}} {{ p.name }};
{% endfor %}
    {{s.structConvertedName()}}({{s.properties|struct_ctor_args}});
    {{s.structConvertedName()}}.fromMap(map):this({{s.properties|struct_ctor_args_from_map}});
  {% if s.json_serializable -%}
    String toJson() { return ''; }
  {% endif -%}
}
{% if s.json_serializable -%}
{{s.structConvertedName()}} {{s.json_serializable_from_json}}(Map<String, dynamic> json) => _${{s.structConvertedName()}}FromJson(json);
{% endif -%}
{% endfor %}

{% if api.events | length > 0 %}
@freezed
class {{api.baseEventName}} with _${{api.baseEventName}}{
{% for e in api.events %} 
  {% if e.doc -%}
/// {{e.doc}}
  {% endif -%}
    factory {{api.baseEventName}}.{{e.arguments[0].type}}Factory({{e.arguments[0].type.getFreezeCtorArgs()}}) = {{e.arguments[0].type}};
{% endfor %}

    factory {{api.baseEventName}}.fromJson(Map<String, dynamic> json) => _${{api.baseEventName}}FromJson(json);
    static const fromJsonFactory = _${{api.baseEventName}}FromJson;
{% for e in api.events %} 
    static const {{e.arguments[0].type}}FromJsonFactory = _$${{e.arguments[0].type}}FromJson;
{% endfor %}
}
{% endif %}

/// {{api.doc}}
{% if api.events | length > 0 %}
///
/// This class can emit following events:
{% for e in api.events %} 
/// * [{{e.arguments[0].type}}] - {{e.doc}}
{% endfor %}
{% endif %}
class {{api.classname}}
{
  jsonrpc2.Peer _client = CpeRpcClient(CpeRpcService.thunder).client;
  bool _verbose = false;

  {% if api.events | length > 0 %}
  late StreamController<{{api.baseEventName}}> _streamController;
  static int _instanceCount = 0;
  {% endif %}

  {{api.classname}}() {
  {% if api.events | length > 0 %}
    _instanceCount++;
    _streamController = _createStreamController();
  {% endif %}
  }

  /// enable verbose debugs from the API class
  void set verbose(bool enable) {
      _verbose = enable;
  }

  {% for property in api.properties %}
  /// {{property.doc}}
  Future<{{property.type}}> {{property.name}}Property () async {
    if (_verbose) {
      print("{{property.name}}Property calling: {{property.callsign}}");
    }

    var result = await _client.sendRequest('{{property.callsign}}');

    if (_verbose) {
      print("{{property.name}}Property result: ${result}");
    }
    return {{property.type.instanceResultCreationCode('result')}};
  }
  {% endfor %}

  {% for method in api.methods %}
  /// {{method.doc}}
  {% if method.arguments | selectattr("doc") | any  -%}
  ///
  {% for a in method.arguments -%}
  /// [{{a.name}}] {{a.doc}}
  {% endfor -%}
  {% endif -%}
  {% if method.result.doc -%}
  /// @result {{method.result.doc}}
  {% endif -%}

  Future<{{method.result.rtype}}> {{method.name}} ({{ method.arguments | method_args }}) async {
    if (_verbose) {
      print("Calling {{method.name}} / {{method.callsign}} {{method.arguments | method_args_verbose}})");
    }

    var result = await _client.sendRequest('{{method.callsign}}');

    if (_verbose) {
      print("{{method.name}} result: ${result}");
    }

    if (result["success"] == true) {
      return {{method.result.rtype.instanceResultCreationCode('result')}};
    }
    return Future.error("Request failure");
  }

  {% endfor %}
{% if api.events | length > 0 %}

  /// Creates the stream controller for the class events: {% for e in api.events -%} `{{e.arguments[0].type}}`{{ ", " if not loop.last else "" }} {%- endfor %}
  StreamController<{{api.baseEventName}}> _createStreamController() {
    void _onListen() {
      String eventId, eventName;
{%- for e in api.events %}
      eventId = "{{e.arguments[0].type}}{{ "${" }}_instanceCount{{ "}" }}";
      eventName = "{{e.name}}";
      if (_verbose) {
        print("registering event: eid: ${eventId} ename: ${eventName}");
      }
      _client.sendRequest('{{api.name}}.1.register', {'event': "{{e.name}}", 'id': eventId}).then(
        (value) {
          if (_verbose) {
            print('onlisten: $value');
          } 
        });
{%- endfor %}
    }

    void _onCancel() {
      String eventId, eventName;
{%- for e in api.events %} 
      eventId = "{{e.arguments[0].type}}{{ "${" }}_instanceCount{{ "}" }}";
      eventName = "{{e.name}}";
      if (_verbose) {
        print("unregistering event: eid: ${eventId} ename: ${eventName}");
      }
      _client.sendRequest('{{api.name}}.1.unregister', {'event': eventName, 'id': eventId}).then(
        (value) { 
          if (_verbose) {
            print('oncancel: $value');
          }
        });
{%- endfor %}
    }

    final streamController = StreamController<{{api.baseEventName}}>.broadcast(
      onListen: _onListen,
      onCancel: _onCancel,
    );

      String eventId, eventName;
{%- for e in api.events %} 
    eventId = "{{e.arguments[0].type}}{{ "${" }}_instanceCount{{ "}" }}";
    eventName = "{{e.name}}";
    if (_verbose) {
      print("registerMehtod for event: ${eventId} ${eventName}");
    }
    _client.registerMethod(
      "${eventId}.${eventName}",
      (jsonrpc2.Parameters data) {
        if (_verbose) {
          print("event: ${eventId}.${eventName} ${data}");
        }
        final response = data.value;
        streamController.add({{api.baseEventName}}.{{e.arguments[0].type}}FromJsonFactory(response));
      }
    );
{%- endfor %}

    return streamController;
  }

  Stream<{{api.baseEventName}}> get stream {
    return _streamController.stream;
  }

{% endif %}
}
