// If not stated otherwise in this file or this component's LICENSE file the
// following copyright and licenses apply:
//
// Copyright 2022 Liberty Global Service B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import 'dart:convert';
import 'dart:io';
import 'package:json_rpc_2/json_rpc_2.dart' as jsonrpc2;
import 'package:test/test.dart';
import 'package:onemw_rdkservices_api/onemw_rdkservices_api.dart';
import 'package:mockito/annotations.dart';
import 'package:mockito/mockito.dart';
import '{{api.filename}}_test.mocks.dart';

@GenerateMocks([jsonrpc2.Peer])
void main() async {

{% for property in api.properties %}
  group('{{api.classname}} {{property.name}}', () {

    test('{{property.name}}Property success call', () async {
      final argsOutDecoded = json.decode(File('test/jsons/{{api.classname}}_{{property.name}}_success_out.json').readAsStringSync());
      final peer = new MockPeer();
      final api = new {{api.classname}}.test(peer);
      api.verbose = true;
      when(peer.sendRequest('{{property.callsign}}'))
          .thenAnswer((_) async => (argsOutDecoded['result']));

      expect(await api.{{property.name}}Property(), equals({{property.type.instanceResultCreationCode(result="argsOutDecoded['result']", fromJson=False)}}));
    });
  });
{% endfor %}

{% for method in api.methods %}
  group('{{api.classname}} {{method.name}}', () {
    test('{{method.name}} success call', () async {
{% if method.arguments | length >0 -%}
        final argsInDecoded = json.decode(File('test/jsons/{{api.classname}}_{{method.name}}_success_in.json').readAsStringSync());
{% endif -%}
      final argsOutDecoded = json.decode(File('test/jsons/{{api.classname}}_{{method.name}}_success_out.json').readAsStringSync());
      final peer = new MockPeer();
      final api = new {{api.classname}}.test(peer);
      api.verbose = true;
{% if method.arguments | length >0 -%}
      when(peer.sendRequest('{{method.callsign}}', argsInDecoded))
          .thenAnswer((_) async => (argsOutDecoded['result']));
{% else %}
      when(peer.sendRequest('{{method.callsign}}'))
          .thenAnswer((_) async => (argsOutDecoded['result']));
{% endif -%}
{% if not 'void' in method.result.rtype.typename() -%}
      expect(await api.{{method.name}}(
{% for a in method.arguments -%}
          {{a.name}}: {{a.type.instanceResultCreationCode(result='argsInDecoded[\'' + a.name + '\']', fromJson=False)}}
          {{ ", " if not loop.last else "" }}
{% endfor %}
        ), equals({{method.result.rtype.instanceResultCreationCode(result="argsOutDecoded['result']", fromJson=False)}}));
{% else -%}
      api.{{method.name}}(
{% for a in method.arguments -%}
          {{a.name}}: {{a.type.instanceResultCreationCode(result='argsInDecoded[\'' + a.name + '\']', fromJson=False)}}
          {{ ", " if not loop.last else "" }}
{% endfor %}
        ).then(expectAsync1((value) {}));
{% endif %}
    });

    test('{{method.name}} failure call', () {
{% if method.arguments | length >0 -%}
      final argsInDecoded = json.decode(File('test/jsons/{{api.classname}}_{{method.name}}_success_in.json').readAsStringSync());
{% endif -%}
      final argsOutDecoded = json.decode(File('test/jsons/{{api.classname}}_{{method.name}}_failure_out.json').readAsStringSync());
      final peer = new MockPeer();
      final api = new {{api.classname}}.test(peer);
      api.verbose = true;
{% if method.arguments | length >0 -%}
      when(peer.sendRequest('{{method.callsign}}', argsInDecoded))
          .thenAnswer((_) async => (argsOutDecoded['result']));
{% else %}
      when(peer.sendRequest('{{method.callsign}}'))
          .thenAnswer((_) async => (argsOutDecoded['result']));
{% endif -%}
      expect(api.{{method.name}}(
{% for a in method.arguments -%}
          {{a.name}}: {{a.type.instanceResultCreationCode(result='argsInDecoded[\'' + a.name + '\']', fromJson=False)}}
          {{ ", " if not loop.last else "" }}
{% endfor %}
        ), equals(throwsA(equals('Request failure'))));
    });
  });
{% endfor %}

{% if api.events | length > 0 %}
group('{{api.classname}} notifications', () {
{%- for e in api.events %}
    test('{{e.name}} notification', () async {
{% if e.arguments[0].type.properties | length > 0 -%}
      final {{e.name}}ArgsOutDecoded = json.decode(File('test/jsons/{{api.classname}}_{{e.name}}_success_out.json').readAsStringSync());
{% endif -%}
      final peer = new MockPeer();
      final api = new {{api.classname}}.test(peer);
      api.verbose = true;
      when(peer.sendRequest('{{api.name}}.1.register', any))
          .thenAnswer((_) async =>  (0));
      when(peer.sendRequest('{{api.name}}.1.unregister', any))
          .thenAnswer((_) async =>  (0));
      Future.delayed(const Duration(milliseconds: 0), () {
        final args = verify(peer.registerMethod(captureAny, captureAny)).captured;
        for(var i = 0; i + 1 < args.length; i += 2) {
          String eventName = args[i].substring(args[i].indexOf('.')+1);
          if( eventName == '{{e.name}}') {
{% if e.arguments[0].type.properties | length > 0 -%}
            args[i+1](jsonrpc2.Parameters(args[i], {{e.name}}ArgsOutDecoded['params']));
{% else %}
            args[i+1](jsonrpc2.Parameters(args[i], <String,dynamic>{}));
{% endif -%}
            break;
          }
        }
      });

      api.stream.listen(
          expectAsync1((value) {
              expect(value, equals({{api.baseEventName}}.{{e.arguments[0].type.typename()}}Factory(
{% for p in e.arguments[0].type.properties -%}
                  {{p.type.instanceResultCreationCode(result='' + e.name + 'ArgsOutDecoded[\'params\'][\'' + p.getJsonFieldName() + '\']', fromJson=False)}}
                  {{ ", " if not loop.last else "" }}
{% endfor %})));
        })
      );
    });
{%- endfor %}
  });
{% endif %}
}

