// If not stated otherwise in this file or this component's LICENSE file the
// following copyright and licenses apply:
//
// Copyright 2022 Liberty Global Service B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

{% if ( api.events | length > 0 ) or ( api.methods | length > 0 ) %}
import 'dart:convert';
{% endif %}
import 'dart:io';
import 'package:json_rpc_2/json_rpc_2.dart' as jsonrpc2;
import 'package:test/test.dart';
import 'package:onemw_rdkservices_api/onemw_rdkservices_api.dart';
import 'package:web_socket_channel/web_socket_channel.dart';
import 'package:stream_channel/stream_channel.dart';

abstract class CpePlatform {
  static const String _localHost = 'localhost';
  static const String _cpeHostKey = 'CPE_HOST';

  static String get host {
    final envHost = Platform.environment[_cpeHostKey];
    if (envHost == null) {
      return _localHost;
    } else if (envHost.contains(':')) {
      //quick check for IPV6
      return '[$envHost]'; //IPV6 needs to be enclosed in []
    } else {
      return envHost;
    }
  }
}

void main() async {

{% for property in api.properties %}
  group('{{api.classname}} {{property.name}}', () {

    test('{{property.name}}Property success call', () async {
      final outFile = new File('test/jsons/{{api.classname}}_{{property.name}}_success_out.json');
      outFile.writeAsStringSync('');
      final socket = WebSocketChannel.connect( Uri.parse('ws://${CpePlatform.host}:9998/jsonrpc'));
      final stream = socket.stream.map((s) {  outFile.writeAsStringSync("${s}", mode: FileMode.append); return s; });
      final channel = StreamChannel.withCloseGuarantee(stream, socket.sink);
      final peer = new jsonrpc2.Peer( channel.cast<String>() );
      peer.listen();
      final api = new {{api.classname}}.test(peer);
      api.verbose = true;
      api.{{property.name}}Property().then(expectAsync1((value) {}));
    });
  });
{% endfor %}

{% for method in api.methods %}
  group('{{api.classname}} {{method.name}}', () {
    test('{{method.name}} success call', () async {
{% if method.arguments | length >0 -%}
      final argsInDecoded = json.decode(File('test/jsons/{{api.classname}}_{{method.name}}_success_in.json').readAsStringSync());
{% endif -%}
      final outFile = new File('test/jsons/{{api.classname}}_{{method.name}}_success_out.json');
      outFile.writeAsStringSync('');
      final socket = WebSocketChannel.connect( Uri.parse('ws://${CpePlatform.host}:9998/jsonrpc'));
      final stream = socket.stream.map((s) {  outFile.writeAsStringSync("${s}", mode: FileMode.append); return s; });
      final channel = StreamChannel.withCloseGuarantee(stream, socket.sink);
      final peer = new jsonrpc2.Peer( channel.cast<String>() );
      peer.listen();
      final api = new {{api.classname}}.test(peer);
      api.verbose = true;
      api.{{method.name}}(
{% for a in method.arguments -%}
          {{a.name}}: {{a.type.instanceResultCreationCode(result='argsInDecoded[\'' + a.name + '\']', fromJson=False)}}
          {{ ", " if not loop.last else "" }}
{% endfor %}
        ).then(expectAsync1((value) {}));
    });
  });
{% endfor %}

{% if api.events | length > 0 %}
group('{{api.classname}} notifications', () {
{%- for e in api.events %}
    test('{{e.name}} notification', () async {
{% if e.arguments[0].type.properties | length > 0 -%}
{% endif -%}
      var done = false;
      var subscription;
      final socket = WebSocketChannel.connect( Uri.parse('ws://${CpePlatform.host}:9998/jsonrpc'));
      final stream = socket.stream.map((s) { 
        final argsDecoded = json.decode(s);
        final event = argsDecoded['method'];
        if( event != null ) {
          final eventName = event.substring(event.indexOf('.') + 1);
          final outFile = new File('test/jsons/{{api.classname}}_${eventName}_success_out.json');
          outFile.writeAsStringSync(s);
          if( eventName == '{{e.name}}' ) {
            done = true;
          }
        }
        return s; 
      });
      final channel = StreamChannel.withCloseGuarantee(stream, socket.sink);
      final peer = new jsonrpc2.Peer( channel.cast<String>() );
      peer.listen();
      final api = new {{api.classname}}.test(peer);
      api.verbose = true;
      subscription = api.stream.listen(expectAsyncUntil1((value) {
            expect(value, anything);
          }, () {
            if( done == true ) {
              subscription.cancel();
            }
            return done; })
      );
    });
{%- endfor %}
  });
{% endif %}
}

